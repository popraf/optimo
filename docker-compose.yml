version: "3.8"

services:
  # Database service
  optimo-mysql:
    container_name: optimo-mysql-container
    image: mysql:9.0
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5    

  # Async tasks broker service
  optimo-redis:
    container_name: optimo-redis-container
    image: redis:7.4.0
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    restart: unless-stopped
    networks:
      - app-network

  optimo-django-migrate:
    container_name: optimo-django-migrate-container
    build:
      context: ./backend/django_backend
      dockerfile: Dockerfile
    env_file:
      - .env
    command: sh -c "python manage.py makemigrations && python manage.py makemigrations app && python manage.py migrate"
    environment:
      DJANGO_SETTINGS_MODULE: django_backend.settings
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
    volumes:
      - ./backend/django_backend:/app_django
    depends_on:
      optimo-mysql:
        condition: service_healthy
    networks:
      - app-network

  # Flask API
  optimo-flask:
    container_name: optimo-flask-container
    env_file:
      - .env
    build:
      context: ./backend/flask
      dockerfile: Dockerfile
    ports:
      - '${FLASK_PORT}:${FLASK_PORT}'
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
    volumes:
      - ./backend/flask:/app_flask
    depends_on:
      optimo-django-migrate:
        condition: service_completed_successfully
      optimo-mysql:
        condition: service_healthy
      optimo-redis:
        condition: service_started
    restart: on-failure
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:${FLASK_PORT}/health"]
      interval: 45s
      timeout: 10s
      retries: 3
  
  # Django backend application
  optimo-django:
    container_name: optimo-django-container
    env_file:
      - .env
    build:
      context: ./backend/django_backend
      dockerfile: Dockerfile
    ports:
      - '${DJANGO_PORT}:${DJANGO_PORT}'
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
    volumes:
      - ./backend/django_backend:/app_django
    command: sh -c "python manage.py runserver 0.0.0.0:${DJANGO_PORT}"
    depends_on:
      optimo-django-migrate:
        condition: service_completed_successfully
      optimo-mysql:
        condition: service_healthy
      optimo-redis:
        condition: service_started
      optimo-flask:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "python", "manage.py", "check"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Async tasks worker
  celery:
    container_name: optimo-celery-container
    env_file:
      - .env
    build:
      context: ./backend/django_backend
      dockerfile: Dockerfile
    command: celery -A django_backend worker --loglevel=info
    environment:
      DJANGO_SETTINGS_MODULE: django_backend.settings
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_BROKER_URL}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
    volumes:
      - ./backend/django_backend:/app_django
    depends_on:
      - optimo-django
      - optimo-redis
    networks:
      - app-network

  # Celery Beat Periodic Tasks
  celery-beat:
    container_name: optimo-celery-beat-container
    env_file:
      - .env
    build:
      context: ./backend/django_backend
      dockerfile: Dockerfile
    command: celery -A django_backend beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      DJANGO_SETTINGS_MODULE: django_backend.settings
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_BROKER_URL}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
    volumes:
      - ./backend/django_backend:/app_django
    depends_on:
      optimo-django:
        condition: service_healthy
      optimo-redis:
        condition: service_started
      optimo-mysql:
        condition: service_healthy
      optimo-django-migrate:
        condition: service_completed_successfully
    networks:
    - app-network
  
networks:
  app-network:
    driver: bridge

volumes:
  db_data:
